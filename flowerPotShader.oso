OpenShadingLanguage 1.00
# Compiled by oslc 1.8.2.pixar1697a56
# options: 
shader flowerPotShader
param	color	cin	1 1 1		%read{27,202} %write{2147483647,-1}
oparam	color	cout	0 0 0		%read{106,244} %write{53,244}
oparam	color	specOut	0 1 0		%read{2147483647,-1} %write{2147483647,-1}
oparam	float	dispOut	0		%read{105,285} %write{105,285}
global	point	P	%read{1,1} %write{2147483647,-1}
local	point	PP	%read{2,226} %write{1,1}
local	float	X	%read{72,200} %write{2,2}
local	float	Y	%read{71,274} %write{4,4}
local	float	Z	%read{88,200} %write{5,5}
local	float	repeatCountQ	%read{11,11} %write{6,6}
local	float	repeatCountR	%read{16,16} %write{7,7}
local	float	s	%read{18,21} %write{11,11}
local	float	t	%read{23,26} %write{16,16}
local	float	q	%read{254,280} %write{21,21}
local	float	r	%read{254,254} %write{26,26}
local	float	___325_val	%read{77,86} %write{74,85}
local	int	___326_i	%read{77,85} %write{76,85}
local	float	___331_val	%read{38,227} %write{35,226}
local	int	___332_i	%read{38,226} %write{37,226}
local	color	___334_baseNoiseCol	%read{53,53} %write{27,27}
local	float	___334_amp	%read{38,47} %write{28,47}
local	float	___334_persistence	%read{38,49} %write{29,29}
local	float	___334_freq	%read{38,47} %write{30,47}
local	float	___334_lacunarity	%read{38,47} %write{31,31}
local	float	___334_octaves	%read{38,47} %write{32,32}
local	float	___334_seed	%read{38,47} %write{33,33}
local	float	___334_colorSwitch	%read{50,53} %write{48,52}
local	float	___335_crackX	%read{94,98} %write{54,54}
local	float	___335_width	%read{93,98} %write{55,93}
local	float	___335_fuzz	%read{92,99} %write{56,92}
local	float	___335_crackEndY	%read{90,91} %write{57,57}
local	float	___335_crackFalloff	%read{90,90} %write{58,58}
local	float	___335_indent	%read{104,104} %write{59,59}
local	color	___335_crackColor	%read{64,106} %write{60,64}
local	float	___335_amp	%read{77,85} %write{65,85}
local	float	___335_persistence	%read{77,85} %write{66,66}
local	float	___335_freq	%read{77,85} %write{67,85}
local	float	___335_lacunarity	%read{77,85} %write{68,68}
local	float	___335_octaves	%read{77,85} %write{69,69}
local	float	___335_seed	%read{77,85} %write{70,70}
local	float	___335_crack	%read{87,102} %write{72,87}
local	float	___336_inCrackY	%read{92,93} %write{91,91}
local	float	___336_inCrackX	%read{104,106} %write{103,103}
local	point	___338_here	%read{109,201} %write{108,200}
local	float	___338_dist	%read{136,239} %write{109,228}
local	color	___338_weatheringCol1	%read{113,234} %write{110,202}
local	color	___338_weatheringCol2	%read{152,244} %write{114,206}
local	float	___338_amp	%read{125,226} %write{115,226}
local	float	___338_persistence	%read{125,226} %write{116,208}
local	float	___338_freq	%read{125,226} %write{117,226}
local	float	___338_lacunarity	%read{125,226} %write{118,210}
local	float	___338_octaves	%read{125,226} %write{119,211}
local	float	___338_seed	%read{125,226} %write{120,212}
local	float	___339_scale1	%read{142,235} %write{141,233}
local	float	___340_scale2	%read{149,243} %write{148,242}
local	float	___342_diskFalloff	%read{257,258} %write{252,252}
local	point	___342_centre	%read{255,255} %write{253,253}
local	point	___342_here	%read{255,255} %write{254,254}
local	float	___342_dist	%read{259,259} %write{255,255}
local	float	___342_diskRad	%read{257,258} %write{256,256}
local	float	___342_inDisk	%read{261,261} %write{260,260}
local	float	___341_lineTop	%read{269,269} %write{263,263}
local	float	___341_lineBottom	%read{266,274} %write{264,264}
local	float	___341_lineFalloff	%read{273,273} %write{265,265}
local	float	___343_scale	%read{278,278} %write{276,276}
local	float	___343_lineWidth	%read{278,279} %write{277,278}
local	float	___343_inLine	%read{284,284} %write{283,283}
const	string	$const1	"pot"		%read{1,1} %write{2147483647,-1}
const	string	$const2	"transform"		%read{0,0} %write{2147483647,-1}
const	string	$const3	"common"		%read{1,1} %write{2147483647,-1}
const	int	$const4	0		%read{2,270} %write{2147483647,-1}
const	int	$const5	3		%read{118,264} %write{2147483647,-1}
const	int	$const6	2		%read{3,68} %write{2147483647,-1}
temp	float	$tmp1	%read{4,4} %write{3,3}
const	float	$const7	3		%read{4,4} %write{2147483647,-1}
const	int	$const8	1		%read{5,226} %write{2147483647,-1}
const	int	$const9	6		%read{6,6} %write{2147483647,-1}
const	float	$const10	2.9000001		%read{7,7} %write{2147483647,-1}
temp	float	$tmp2	%read{11,11} %write{10,10}
temp	float	$tmp3	%read{10,10} %write{8,8}
temp	float	$tmp4	%read{10,10} %write{9,9}
temp	float	$tmp5	%read{15,15} %write{12,12}
temp	float	$tmp6	%read{15,15} %write{14,14}
temp	float	$tmp7	%read{14,14} %write{13,13}
const	float	$const12	10		%read{13,13} %write{2147483647,-1}
const	float	$const13	1.6		%read{13,13} %write{2147483647,-1}
temp	float	$tmp8	%read{16,16} %write{15,15}
const	float	$const14	1		%read{18,260} %write{2147483647,-1}
const	string	$const15	"mod"		%read{17,22} %write{2147483647,-1}
temp	float	$tmp9	%read{20,20} %write{19,19}
temp	float	$tmp10	%read{19,19} %write{18,18}
temp	float	$tmp11	%read{21,21} %write{20,20}
temp	float	$tmp12	%read{25,25} %write{24,24}
temp	float	$tmp13	%read{24,24} %write{23,23}
temp	float	$tmp14	%read{26,26} %write{25,25}
const	color	$const16	0 0 0		%read{27,27} %write{2147483647,-1}
const	float	$const17	0.69999999		%read{27,207} %write{2147483647,-1}
const	float	$const18	0.5		%read{29,283} %write{2147483647,-1}
const	int	$const19	4		%read{32,211} %write{2147483647,-1}
const	string	$const20	"perlinNoise"		%read{34,213} %write{2147483647,-1}
temp	int	$tmp16	%read{36,47} %write{37,47}
temp	float	$tmp17	%read{38,47} %write{38,47}
const	string	$const21	"perlin"		%read{42,221} %write{2147483647,-1}
temp	point	$tmp18	%read{38,47} %write{38,47}
temp	point	$tmp19	%read{38,47} %write{38,47}
temp	point	$tmp20	%read{38,47} %write{38,47}
temp	float	$tmp21	%read{38,47} %write{38,47}
temp	float	$tmp22	%read{50,50} %write{49,49}
temp	float	$tmp23	%read{52,52} %write{51,51}
const	float	$const22	0.02		%read{55,56} %write{2147483647,-1}
const	float	$const23	1.7		%read{57,57} %write{2147483647,-1}
const	float	$const24	0.30000001		%read{58,277} %write{2147483647,-1}
const	float	$const25	0.0049999999		%read{59,284} %write{2147483647,-1}
const	color	$const26	1 1 1		%read{60,202} %write{2147483647,-1}
const	float	$const27	0.40000001		%read{60,231} %write{2147483647,-1}
temp	float	$tmp25	%read{62,62} %write{61,61}
temp	float	$tmp26	%read{63,63} %write{62,62}
temp	float	$tmp27	%read{64,64} %write{63,63}
const	float	$const28	0.1		%read{71,252} %write{2147483647,-1}
temp	float	$tmp28	%read{72,72} %write{71,71}
temp	float	$tmp29	%read{87,87} %write{86,86}
temp	int	$tmp30	%read{75,85} %write{76,85}
temp	float	$tmp31	%read{77,85} %write{77,85}
temp	float	$tmp32	%read{77,85} %write{77,85}
temp	float	$tmp33	%read{77,85} %write{77,85}
temp	float	$tmp34	%read{77,85} %write{77,85}
temp	int	$tmp35	%read{89,89} %write{88,88}
temp	float	$tmp36	%read{91,91} %write{90,90}
temp	float	$tmp37	%read{95,95} %write{94,94}
temp	float	$tmp38	%read{101,101} %write{95,95}
temp	float	$tmp39	%read{101,101} %write{96,96}
temp	float	$tmp40	%read{102,102} %write{97,97}
temp	float	$tmp41	%read{99,99} %write{98,98}
temp	float	$tmp42	%read{102,102} %write{99,99}
const	string	$const29	"doubleSmoothstep"		%read{100,100} %write{2147483647,-1}
temp	float	$tmp43	%read{103,103} %write{101,101}
temp	float	$tmp44	%read{103,103} %write{102,102}
temp	float	$tmp45	%read{105,105} %write{104,104}
const	point	$const30	1.1 0.40000001 -0.80000001		%read{109,109} %write{2147483647,-1}
const	float	$const31	0.80000001		%read{111,147} %write{2147483647,-1}
const	string	$const32	"addWeathering"		%read{107,199} %write{2147483647,-1}
temp	color	$tmp48	%read{114,114} %write{113,113}
temp	float	$tmp49	%read{112,112} %write{111,111}
temp	float	$tmp50	%read{113,113} %write{112,112}
const	color	$const33	0.02 0.0099999998 0		%read{114,206} %write{2147483647,-1}
const	float	$const34	0.56		%read{116,208} %write{2147483647,-1}
temp	float	$tmp52	%read{136,136} %write{135,135}
temp	int	$tmp53	%read{123,134} %write{124,134}
temp	float	$tmp54	%read{125,134} %write{125,134}
temp	point	$tmp55	%read{125,134} %write{125,134}
temp	point	$tmp56	%read{125,134} %write{125,134}
temp	point	$tmp57	%read{125,134} %write{125,134}
temp	float	$tmp58	%read{125,134} %write{125,134}
temp	int	$tmp59	%read{138,138} %write{137,137}
temp	float	$tmp60	%read{141,141} %write{140,140}
temp	float	$tmp61	%read{140,140} %write{139,139}
const	float	$const35	0		%read{140,254} %write{2147483647,-1}
const	float	$const36	0.0040000002		%read{143,235} %write{2147483647,-1}
temp	float	$tmp62	%read{144,144} %write{143,143}
temp	int	$tmp63	%read{146,146} %write{145,145}
temp	float	$tmp64	%read{148,148} %write{147,147}
temp	float	$tmp65	%read{150,150} %write{149,149}
temp	float	$tmp66	%read{152,152} %write{151,151}
const	point	$const37	-1 2.7 -1.1		%read{155,155} %write{2147483647,-1}
temp	color	$tmp69	%read{160,160} %write{159,159}
temp	float	$tmp70	%read{158,158} %write{157,157}
temp	float	$tmp71	%read{159,159} %write{158,158}
temp	float	$tmp73	%read{182,182} %write{181,181}
temp	int	$tmp74	%read{169,180} %write{170,180}
temp	float	$tmp75	%read{171,180} %write{171,180}
temp	point	$tmp76	%read{171,180} %write{171,180}
temp	point	$tmp77	%read{171,180} %write{171,180}
temp	point	$tmp78	%read{171,180} %write{171,180}
temp	float	$tmp79	%read{171,180} %write{171,180}
temp	int	$tmp80	%read{184,184} %write{183,183}
temp	float	$tmp81	%read{187,187} %write{186,186}
temp	float	$tmp82	%read{186,186} %write{185,185}
temp	float	$tmp83	%read{190,190} %write{189,189}
temp	int	$tmp84	%read{192,192} %write{191,191}
temp	float	$tmp85	%read{194,194} %write{193,193}
temp	float	$tmp86	%read{196,196} %write{195,195}
temp	float	$tmp87	%read{198,198} %write{197,197}
const	point	$const38	1 3.4000001 1		%read{201,201} %write{2147483647,-1}
const	float	$const39	0.34999999		%read{203,239} %write{2147483647,-1}
temp	color	$tmp90	%read{206,206} %write{205,205}
temp	float	$tmp91	%read{204,204} %write{203,203}
temp	float	$tmp92	%read{205,205} %write{204,204}
temp	float	$tmp94	%read{228,228} %write{227,227}
temp	int	$tmp95	%read{215,226} %write{216,226}
temp	float	$tmp96	%read{217,226} %write{217,226}
temp	point	$tmp97	%read{217,226} %write{217,226}
temp	point	$tmp98	%read{217,226} %write{217,226}
temp	point	$tmp99	%read{217,226} %write{217,226}
temp	float	$tmp100	%read{217,226} %write{217,226}
temp	int	$tmp101	%read{230,230} %write{229,229}
temp	float	$tmp102	%read{233,233} %write{232,232}
temp	float	$tmp103	%read{232,232} %write{231,231}
temp	float	$tmp104	%read{236,236} %write{235,235}
temp	int	$tmp105	%read{238,238} %write{237,237}
temp	float	$tmp106	%read{240,240} %write{239,239}
temp	float	$tmp107	%read{242,242} %write{241,241}
temp	float	$tmp108	%read{244,244} %write{243,243}
temp	int	$tmp109	%read{246,246} %write{245,245}
temp	int	$tmp110	%read{247,251} %write{246,250}
const	float	$const40	3.4000001		%read{248,263} %write{2147483647,-1}
temp	int	$tmp111	%read{249,249} %write{248,248}
temp	int	$tmp112	%read{250,250} %write{249,249}
const	point	$const41	0.5 0.5 0		%read{253,253} %write{2147483647,-1}
temp	float	$tmp113	%read{260,260} %write{259,259}
temp	float	$tmp114	%read{259,259} %write{257,257}
temp	float	$tmp115	%read{259,259} %write{258,258}
temp	float	$tmp116	%read{262,262} %write{261,261}
const	float	$const42	0.2		%read{265,265} %write{2147483647,-1}
temp	int	$tmp117	%read{267,267} %write{266,266}
temp	int	$tmp118	%read{268,272} %write{267,271}
temp	int	$tmp119	%read{270,270} %write{269,269}
temp	int	$tmp120	%read{271,271} %write{270,270}
temp	float	$tmp121	%read{276,276} %write{275,275}
temp	float	$tmp122	%read{275,275} %write{274,274}
temp	float	$tmp123	%read{274,274} %write{273,273}
temp	float	$tmp124	%read{283,283} %write{279,279}
temp	float	$tmp125	%read{282,282} %write{281,281}
temp	float	$tmp126	%read{281,281} %write{280,280}
temp	float	$tmp127	%read{283,283} %write{282,282}
temp	float	$tmp128	%read{285,285} %write{284,284}
code ___main___
# flowerPotShader.osl:11
#     point PP = transform("pot",P);
	functioncall	$const2 2 	%filename{"flowerPotShader.osl"} %line{11} %argrw{"r"}
# /opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h:258
# }
	transform	PP $const3 $const1 P 	%filename{"/opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h"} %line{258} %argrw{"wrrr"}
# flowerPotShader.osl:13
#     float X = PP[0];
	compref		X PP $const4 	%filename{"flowerPotShader.osl"} %line{13} %argrw{"wrr"}
# flowerPotShader.osl:14
#     float Y = 3 - PP[2];
	compref		$tmp1 PP $const6 	%line{14} %argrw{"wrr"}
	sub		Y $const7 $tmp1 	%argrw{"wrr"}
# flowerPotShader.osl:15
#     float Z = PP[1];
	compref		Z PP $const8 	%line{15} %argrw{"wrr"}
# flowerPotShader.osl:18
#     float repeatCountQ = 6;
	assign		repeatCountQ $const9 	%line{18} %argrw{"wr"}
# flowerPotShader.osl:19
#     float repeatCountR = 2.9;
	assign		repeatCountR $const10 	%line{19} %argrw{"wr"}
# flowerPotShader.osl:20
#     float s = atan2(PP[1],PP[0])*repeatCountQ;
	compref		$tmp3 PP $const8 	%line{20} %argrw{"wrr"}
	compref		$tmp4 PP $const4 	%argrw{"wrr"}
	atan2		$tmp2 $tmp3 $tmp4 	%argrw{"wrr"}
	mul		s $tmp2 repeatCountQ 	%argrw{"wrr"}
# flowerPotShader.osl:21
#     float t = PP[2]*sin(atan2(10,1.6))*repeatCountR;
	compref		$tmp5 PP $const6 	%line{21} %argrw{"wrr"}
	atan2		$tmp7 $const12 $const13 	%argrw{"wrr"}
	sin		$tmp6 $tmp7 	%argrw{"wr"}
	mul		$tmp8 $tmp5 $tmp6 	%argrw{"wrr"}
	mul		t $tmp8 repeatCountR 	%argrw{"wrr"}
# flowerPotShader.osl:22
#     float q = mod(s,1);
	functioncall	$const15 22 	%line{22} %argrw{"r"}
# /opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h:136
# float hypot (float a, float b) { return sqrt (a*a + b*b); }
	div		$tmp10 s $const14 	%filename{"/opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h"} %line{136} %argrw{"wrr"}
	floor		$tmp9 $tmp10 	%argrw{"wr"}
	mul		$tmp11 $const14 $tmp9 	%argrw{"wrr"}
	sub		q s $tmp11 	%argrw{"wrr"}
# flowerPotShader.osl:23
#     float r = mod(t,1);
	functioncall	$const15 27 	%filename{"flowerPotShader.osl"} %line{23} %argrw{"r"}
# /opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h:136
# PERCOMP1 (inversesqrt)
	div		$tmp13 t $const14 	%filename{"/opt/pixar/RenderManProServer-22.0/lib/osl/include/stdosl.h"} %line{136} %argrw{"wrr"}
	floor		$tmp12 $tmp13 	%argrw{"wr"}
	mul		$tmp14 $const14 $tmp12 	%argrw{"wrr"}
	sub		r t $tmp14 	%argrw{"wrr"}
# flowerPotShader.osl:79
#     color baseNoiseCol = mix(cin,color(0,0,0),0.7);
	mix		___334_baseNoiseCol cin $const16 $const17 	%filename{"flowerPotShader.osl"} %line{79} %argrw{"wrrr"}
# flowerPotShader.osl:81
#     float amp = 1;
	assign		___334_amp $const8 	%line{81} %argrw{"wr"}
# flowerPotShader.osl:82
#     float persistence = 0.5;
	assign		___334_persistence $const18 	%line{82} %argrw{"wr"}
# flowerPotShader.osl:83
#     float freq = 2;
	assign		___334_freq $const6 	%line{83} %argrw{"wr"}
# flowerPotShader.osl:84
#     float lacunarity = 2;
	assign		___334_lacunarity $const6 	%line{84} %argrw{"wr"}
# flowerPotShader.osl:85
#     float octaves = 4;
	assign		___334_octaves $const19 	%line{85} %argrw{"wr"}
# flowerPotShader.osl:86
#     float seed = 0;
	assign		___334_seed $const4 	%line{86} %argrw{"wr"}
# flowerPotShader.osl:90
#                                             octaves, seed, PP);
	functioncall	$const20 49 	%line{90} %argrw{"r"}
# flowerPotShader.osl:67
#         float val = 0;
	assign		___331_val $const4 	%line{67} %argrw{"wr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	for		$tmp16 38 39 47 48 	%line{68} %argrw{"r"}
	assign		___332_i $const4 	%argrw{"wr"}
	lt		$tmp16 ___332_i ___334_octaves 	%argrw{"wrr"}
# flowerPotShader.osl:70
#             val += amp*(float)noise("perlin", w*freq + (point)seed);
	mul		$tmp18 PP ___334_freq 	%line{70} %argrw{"wrr"}
	assign		$tmp19 ___334_seed 	%argrw{"wr"}
	add		$tmp20 $tmp18 $tmp19 	%argrw{"wrr"}
	noise		$tmp17 $const21 $tmp20 	%argrw{"wrr"}
	mul		$tmp21 ___334_amp $tmp17 	%argrw{"wrr"}
	add		___331_val ___331_val $tmp21 	%argrw{"wrr"}
# flowerPotShader.osl:71
#             amp *= persistence;
	mul		___334_amp ___334_amp ___334_persistence 	%line{71} %argrw{"wrr"}
# flowerPotShader.osl:72
#             freq *= lacunarity;
	mul		___334_freq ___334_freq ___334_lacunarity 	%line{72} %argrw{"wrr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	add		___332_i ___332_i $const8 	%line{68} %argrw{"wrr"}
# flowerPotShader.osl:74
#         return val;
	assign		___334_colorSwitch ___331_val 	%line{74} %argrw{"wr"}
# flowerPotShader.osl:92
#     colorSwitch *= 1-persistence;
	sub		$tmp22 $const14 ___334_persistence 	%line{92} %argrw{"wrr"}
	mul		___334_colorSwitch ___334_colorSwitch $tmp22 	%argrw{"wrr"}
# flowerPotShader.osl:94
#     colorSwitch = 0.5 + 0.5*colorSwitch;
	mul		$tmp23 $const18 ___334_colorSwitch 	%line{94} %argrw{"wrr"}
	add		___334_colorSwitch $const18 $tmp23 	%argrw{"wrr"}
# flowerPotShader.osl:95
#     cout = mix(cin, baseNoiseCol, colorSwitch);
	mix		cout cin ___334_baseNoiseCol ___334_colorSwitch 	%line{95} %argrw{"wrrr"}
# flowerPotShader.osl:99
#     float crackX = 0;
	assign		___335_crackX $const4 	%line{99} %argrw{"wr"}
# flowerPotShader.osl:100
#     float width = 0.02;
	assign		___335_width $const22 	%line{100} %argrw{"wr"}
# flowerPotShader.osl:101
#     float fuzz = 0.02;
	assign		___335_fuzz $const22 	%line{101} %argrw{"wr"}
# flowerPotShader.osl:102
#     float crackEndY = 1.7;
	assign		___335_crackEndY $const23 	%line{102} %argrw{"wr"}
# flowerPotShader.osl:103
#     float crackFalloff = 0.3;
	assign		___335_crackFalloff $const24 	%line{103} %argrw{"wr"}
# flowerPotShader.osl:104
#     float indent = 0.005;
	assign		___335_indent $const25 	%line{104} %argrw{"wr"}
# flowerPotShader.osl:105
#     color crackColor = mix(cin, color(1,1,1), 0.4);
	mix		___335_crackColor cin $const26 $const27 	%line{105} %argrw{"wrrr"}
# flowerPotShader.osl:106
#     crackColor *= (0.5 + 0.5*(float)(noise("perlin", PP)));
	noise		$tmp25 $const21 PP 	%line{106} %argrw{"wrr"}
	mul		$tmp26 $const18 $tmp25 	%argrw{"wrr"}
	add		$tmp27 $const18 $tmp26 	%argrw{"wrr"}
	mul		___335_crackColor ___335_crackColor $tmp27 	%argrw{"wrr"}
# flowerPotShader.osl:108
#     float amp = 0.3;
	assign		___335_amp $const24 	%line{108} %argrw{"wr"}
# flowerPotShader.osl:109
#     float persistence = 0.5;
	assign		___335_persistence $const18 	%line{109} %argrw{"wr"}
# flowerPotShader.osl:110
#     float freq = 1;
	assign		___335_freq $const8 	%line{110} %argrw{"wr"}
# flowerPotShader.osl:111
#     float lacunarity = 2;
	assign		___335_lacunarity $const6 	%line{111} %argrw{"wr"}
# flowerPotShader.osl:112
#     float octaves = 4;
	assign		___335_octaves $const19 	%line{112} %argrw{"wr"}
# flowerPotShader.osl:113
#     float seed = 1;
	assign		___335_seed $const8 	%line{113} %argrw{"wr"}
# flowerPotShader.osl:114
#     float crack = X + Y*0.1;
	mul		$tmp28 Y $const28 	%line{114} %argrw{"wrr"}
	add		___335_crack X $tmp28 	%argrw{"wrr"}
# flowerPotShader.osl:116
#                             octaves, seed, Y));
	functioncall	$const20 87 	%line{116} %argrw{"r"}
# flowerPotShader.osl:41
#         float val = 0;
	assign		___325_val $const4 	%line{41} %argrw{"wr"}
# flowerPotShader.osl:42
#         for(int i=0; i<octaves; ++i)
	for		$tmp30 77 78 85 86 	%line{42} %argrw{"r"}
	assign		___326_i $const4 	%argrw{"wr"}
	lt		$tmp30 ___326_i ___335_octaves 	%argrw{"wrr"}
# flowerPotShader.osl:44
#             val += amp*(float)noise("perlin",x*freq + seed);
	mul		$tmp32 Y ___335_freq 	%line{44} %argrw{"wrr"}
	add		$tmp33 $tmp32 ___335_seed 	%argrw{"wrr"}
	noise		$tmp31 $const21 $tmp33 	%argrw{"wrr"}
	mul		$tmp34 ___335_amp $tmp31 	%argrw{"wrr"}
	add		___325_val ___325_val $tmp34 	%argrw{"wrr"}
# flowerPotShader.osl:45
#             amp *= persistence;
	mul		___335_amp ___335_amp ___335_persistence 	%line{45} %argrw{"wrr"}
# flowerPotShader.osl:46
#             freq *= lacunarity;
	mul		___335_freq ___335_freq ___335_lacunarity 	%line{46} %argrw{"wrr"}
# flowerPotShader.osl:42
#         for(int i=0; i<octaves; ++i)
	add		___326_i ___326_i $const8 	%line{42} %argrw{"wrr"}
# flowerPotShader.osl:48
#         return val;
	assign		$tmp29 ___325_val 	%line{48} %argrw{"wr"}
# flowerPotShader.osl:116
#                             octaves, seed, Y));
	add		___335_crack ___335_crack $tmp29 	%line{116} %argrw{"wrr"}
# flowerPotShader.osl:118
#     if(Z < 0)
	lt		$tmp35 Z $const4 	%line{118} %argrw{"wrr"}
	if		$tmp35 107 107 	%argrw{"r"}
# flowerPotShader.osl:120
#         float inCrackY = smoothstep(crackEndY - crackFalloff, crackEndY, Y);
	sub		$tmp36 ___335_crackEndY ___335_crackFalloff 	%line{120} %argrw{"wrr"}
	smoothstep	___336_inCrackY $tmp36 ___335_crackEndY Y 	%argrw{"wrrr"}
# flowerPotShader.osl:121
#         fuzz *= inCrackY;
	mul		___335_fuzz ___335_fuzz ___336_inCrackY 	%line{121} %argrw{"wrr"}
# flowerPotShader.osl:122
#         width *= inCrackY;
	mul		___335_width ___335_width ___336_inCrackY 	%line{122} %argrw{"wrr"}
# flowerPotShader.osl:124
#                                 crackX-width-fuzz, crackX-width,
	sub		$tmp37 ___335_crackX ___335_width 	%line{124} %argrw{"wrr"}
	sub		$tmp38 $tmp37 ___335_fuzz 	%argrw{"wrr"}
	sub		$tmp39 ___335_crackX ___335_width 	%argrw{"wrr"}
# flowerPotShader.osl:125
#                                 crackX+width, crackX+width+fuzz, crack);
	add		$tmp40 ___335_crackX ___335_width 	%line{125} %argrw{"wrr"}
	add		$tmp41 ___335_crackX ___335_width 	%argrw{"wrr"}
	add		$tmp42 $tmp41 ___335_fuzz 	%argrw{"wrr"}
	functioncall	$const29 104 	%argrw{"r"}
# flowerPotShader.osl:32
#         return  smoothstep(start, midPoint1, x) - 
	smoothstep	$tmp43 $tmp38 $tmp39 ___335_crack 	%line{32} %argrw{"wrrr"}
# flowerPotShader.osl:33
#                 smoothstep(midPoint2, end, x);
	smoothstep	$tmp44 $tmp40 $tmp42 ___335_crack 	%line{33} %argrw{"wrrr"}
	sub		___336_inCrackX $tmp43 $tmp44 	%argrw{"wrr"}
# flowerPotShader.osl:127
#         dispOut = dispOut -indent * inCrackX;
	mul		$tmp45 ___335_indent ___336_inCrackX 	%line{127} %argrw{"wrr"}
	sub		dispOut dispOut $tmp45 	%argrw{"wrr"}
# flowerPotShader.osl:128
#         cout = mix(cout, crackColor, inCrackX);
	mix		cout cout ___335_crackColor ___336_inCrackX 	%line{128} %argrw{"wrrr"}
# flowerPotShader.osl:165
#     addWeathering(point(1.1, 0.4, -0.8), 1, 0.8);
	functioncall	$const32 153 	%line{165} %argrw{"r"}
# flowerPotShader.osl:135
#         point here = point(X,Y,Z);
	point		___338_here X Y Z 	%line{135} %argrw{"wrrr"}
# flowerPotShader.osl:136
#         float dist = distance(centre,here);
	distance	___338_dist $const30 ___338_here 	%line{136} %argrw{"wrr"}
# flowerPotShader.osl:137
#         color weatheringCol1 = mix( cin, color(1,1,1), 0.5);
	mix		___338_weatheringCol1 cin $const26 $const18 	%line{137} %argrw{"wrrr"}
# flowerPotShader.osl:138
#         color weatheringCol2 = mix( mix(cout, weatheringCol1, 1-rad2/rad1),
	div		$tmp49 $const31 $const14 	%line{138} %argrw{"wrr"}
	sub		$tmp50 $const14 $tmp49 	%argrw{"wrr"}
	mix		$tmp48 cout ___338_weatheringCol1 $tmp50 	%argrw{"wrrr"}
# flowerPotShader.osl:140
#                                     0.3);
	mix		___338_weatheringCol2 $tmp48 $const33 $const24 	%line{140} %argrw{"wrrr"}
# flowerPotShader.osl:141
#         float amp = 0.7;
	assign		___338_amp $const17 	%line{141} %argrw{"wr"}
# flowerPotShader.osl:142
#         float persistence = 0.56;
	assign		___338_persistence $const34 	%line{142} %argrw{"wr"}
# flowerPotShader.osl:143
#         float freq = 4;
	assign		___338_freq $const19 	%line{143} %argrw{"wr"}
# flowerPotShader.osl:144
#         float lacunarity = 3;
	assign		___338_lacunarity $const5 	%line{144} %argrw{"wr"}
# flowerPotShader.osl:145
#         float octaves = 4;
	assign		___338_octaves $const19 	%line{145} %argrw{"wr"}
# flowerPotShader.osl:146
#         float seed = 0;
	assign		___338_seed $const4 	%line{146} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	functioncall	$const20 136 	%line{148} %argrw{"r"}
# flowerPotShader.osl:67
#         float val = 0;
	assign		___331_val $const4 	%line{67} %argrw{"wr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	for		$tmp53 125 126 134 135 	%line{68} %argrw{"r"}
	assign		___332_i $const4 	%argrw{"wr"}
	lt		$tmp53 ___332_i ___338_octaves 	%argrw{"wrr"}
# flowerPotShader.osl:70
#             val += amp*(float)noise("perlin", w*freq + (point)seed);
	mul		$tmp55 PP ___338_freq 	%line{70} %argrw{"wrr"}
	assign		$tmp56 ___338_seed 	%argrw{"wr"}
	add		$tmp57 $tmp55 $tmp56 	%argrw{"wrr"}
	noise		$tmp54 $const21 $tmp57 	%argrw{"wrr"}
	mul		$tmp58 ___338_amp $tmp54 	%argrw{"wrr"}
	add		___331_val ___331_val $tmp58 	%argrw{"wrr"}
# flowerPotShader.osl:71
#             amp *= persistence;
	mul		___338_amp ___338_amp ___338_persistence 	%line{71} %argrw{"wrr"}
# flowerPotShader.osl:72
#             freq *= lacunarity;
	mul		___338_freq ___338_freq ___338_lacunarity 	%line{72} %argrw{"wrr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	add		___332_i ___332_i $const8 	%line{68} %argrw{"wrr"}
# flowerPotShader.osl:74
#         return val;
	assign		$tmp52 ___331_val 	%line{74} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	add		___338_dist ___338_dist $tmp52 	%line{148} %argrw{"wrr"}
# flowerPotShader.osl:150
#         if(dist < rad1)
	lt		$tmp59 ___338_dist $const14 	%line{150} %argrw{"wrr"}
	if		$tmp59 153 153 	%argrw{"r"}
# flowerPotShader.osl:152
#             float scale1 = 1-max(dist/rad1,0);
	div		$tmp61 ___338_dist $const14 	%line{152} %argrw{"wrr"}
	max		$tmp60 $tmp61 $const35 	%argrw{"wrr"}
	sub		___339_scale1 $const14 $tmp60 	%argrw{"wrr"}
# flowerPotShader.osl:153
#             cout = mix(cout, weatheringCol1, scale1);
	mix		cout cout ___338_weatheringCol1 ___339_scale1 	%line{153} %argrw{"wrrr"}
# flowerPotShader.osl:154
#             dispOut = dispOut - scale1*0.004;
	mul		$tmp62 ___339_scale1 $const36 	%line{154} %argrw{"wrr"}
	sub		dispOut dispOut $tmp62 	%argrw{"wrr"}
# flowerPotShader.osl:156
#             if(dist < rad2)
	lt		$tmp63 ___338_dist $const31 	%line{156} %argrw{"wrr"}
	if		$tmp63 153 153 	%argrw{"r"}
# flowerPotShader.osl:158
#                 float scale2 = max(dist/rad2,0);
	div		$tmp64 ___338_dist $const31 	%line{158} %argrw{"wrr"}
	max		___340_scale2 $tmp64 $const35 	%argrw{"wrr"}
# flowerPotShader.osl:159
#                 scale2 *= scale2*scale2;
	mul		$tmp65 ___340_scale2 ___340_scale2 	%line{159} %argrw{"wrr"}
	mul		___340_scale2 ___340_scale2 $tmp65 	%argrw{"wrr"}
# flowerPotShader.osl:160
#                 cout = mix(cout, weatheringCol2, 1-scale2);
	sub		$tmp66 $const14 ___340_scale2 	%line{160} %argrw{"wrr"}
	mix		cout cout ___338_weatheringCol2 $tmp66 	%argrw{"wrrr"}
# flowerPotShader.osl:166
#     addWeathering(point(-1, 2.7, -1.1), 0.5, 0.4);
	functioncall	$const32 199 	%line{166} %argrw{"r"}
# flowerPotShader.osl:135
#         point here = point(X,Y,Z);
	point		___338_here X Y Z 	%line{135} %argrw{"wrrr"}
# flowerPotShader.osl:136
#         float dist = distance(centre,here);
	distance	___338_dist $const37 ___338_here 	%line{136} %argrw{"wrr"}
# flowerPotShader.osl:137
#         color weatheringCol1 = mix( cin, color(1,1,1), 0.5);
	mix		___338_weatheringCol1 cin $const26 $const18 	%line{137} %argrw{"wrrr"}
# flowerPotShader.osl:138
#         color weatheringCol2 = mix( mix(cout, weatheringCol1, 1-rad2/rad1),
	div		$tmp70 $const27 $const18 	%line{138} %argrw{"wrr"}
	sub		$tmp71 $const14 $tmp70 	%argrw{"wrr"}
	mix		$tmp69 cout ___338_weatheringCol1 $tmp71 	%argrw{"wrrr"}
# flowerPotShader.osl:140
#                                     0.3);
	mix		___338_weatheringCol2 $tmp69 $const33 $const24 	%line{140} %argrw{"wrrr"}
# flowerPotShader.osl:141
#         float amp = 0.7;
	assign		___338_amp $const17 	%line{141} %argrw{"wr"}
# flowerPotShader.osl:142
#         float persistence = 0.56;
	assign		___338_persistence $const34 	%line{142} %argrw{"wr"}
# flowerPotShader.osl:143
#         float freq = 4;
	assign		___338_freq $const19 	%line{143} %argrw{"wr"}
# flowerPotShader.osl:144
#         float lacunarity = 3;
	assign		___338_lacunarity $const5 	%line{144} %argrw{"wr"}
# flowerPotShader.osl:145
#         float octaves = 4;
	assign		___338_octaves $const19 	%line{145} %argrw{"wr"}
# flowerPotShader.osl:146
#         float seed = 0;
	assign		___338_seed $const4 	%line{146} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	functioncall	$const20 182 	%line{148} %argrw{"r"}
# flowerPotShader.osl:67
#         float val = 0;
	assign		___331_val $const4 	%line{67} %argrw{"wr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	for		$tmp74 171 172 180 181 	%line{68} %argrw{"r"}
	assign		___332_i $const4 	%argrw{"wr"}
	lt		$tmp74 ___332_i ___338_octaves 	%argrw{"wrr"}
# flowerPotShader.osl:70
#             val += amp*(float)noise("perlin", w*freq + (point)seed);
	mul		$tmp76 PP ___338_freq 	%line{70} %argrw{"wrr"}
	assign		$tmp77 ___338_seed 	%argrw{"wr"}
	add		$tmp78 $tmp76 $tmp77 	%argrw{"wrr"}
	noise		$tmp75 $const21 $tmp78 	%argrw{"wrr"}
	mul		$tmp79 ___338_amp $tmp75 	%argrw{"wrr"}
	add		___331_val ___331_val $tmp79 	%argrw{"wrr"}
# flowerPotShader.osl:71
#             amp *= persistence;
	mul		___338_amp ___338_amp ___338_persistence 	%line{71} %argrw{"wrr"}
# flowerPotShader.osl:72
#             freq *= lacunarity;
	mul		___338_freq ___338_freq ___338_lacunarity 	%line{72} %argrw{"wrr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	add		___332_i ___332_i $const8 	%line{68} %argrw{"wrr"}
# flowerPotShader.osl:74
#         return val;
	assign		$tmp73 ___331_val 	%line{74} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	add		___338_dist ___338_dist $tmp73 	%line{148} %argrw{"wrr"}
# flowerPotShader.osl:150
#         if(dist < rad1)
	lt		$tmp80 ___338_dist $const18 	%line{150} %argrw{"wrr"}
	if		$tmp80 199 199 	%argrw{"r"}
# flowerPotShader.osl:152
#             float scale1 = 1-max(dist/rad1,0);
	div		$tmp82 ___338_dist $const18 	%line{152} %argrw{"wrr"}
	max		$tmp81 $tmp82 $const35 	%argrw{"wrr"}
	sub		___339_scale1 $const14 $tmp81 	%argrw{"wrr"}
# flowerPotShader.osl:153
#             cout = mix(cout, weatheringCol1, scale1);
	mix		cout cout ___338_weatheringCol1 ___339_scale1 	%line{153} %argrw{"wrrr"}
# flowerPotShader.osl:154
#             dispOut = dispOut - scale1*0.004;
	mul		$tmp83 ___339_scale1 $const36 	%line{154} %argrw{"wrr"}
	sub		dispOut dispOut $tmp83 	%argrw{"wrr"}
# flowerPotShader.osl:156
#             if(dist < rad2)
	lt		$tmp84 ___338_dist $const27 	%line{156} %argrw{"wrr"}
	if		$tmp84 199 199 	%argrw{"r"}
# flowerPotShader.osl:158
#                 float scale2 = max(dist/rad2,0);
	div		$tmp85 ___338_dist $const27 	%line{158} %argrw{"wrr"}
	max		___340_scale2 $tmp85 $const35 	%argrw{"wrr"}
# flowerPotShader.osl:159
#                 scale2 *= scale2*scale2;
	mul		$tmp86 ___340_scale2 ___340_scale2 	%line{159} %argrw{"wrr"}
	mul		___340_scale2 ___340_scale2 $tmp86 	%argrw{"wrr"}
# flowerPotShader.osl:160
#                 cout = mix(cout, weatheringCol2, 1-scale2);
	sub		$tmp87 $const14 ___340_scale2 	%line{160} %argrw{"wrr"}
	mix		cout cout ___338_weatheringCol2 $tmp87 	%argrw{"wrrr"}
# flowerPotShader.osl:167
#     addWeathering(point(1, 3.4, 1), 0.4, 0.35);
	functioncall	$const32 245 	%line{167} %argrw{"r"}
# flowerPotShader.osl:135
#         point here = point(X,Y,Z);
	point		___338_here X Y Z 	%line{135} %argrw{"wrrr"}
# flowerPotShader.osl:136
#         float dist = distance(centre,here);
	distance	___338_dist $const38 ___338_here 	%line{136} %argrw{"wrr"}
# flowerPotShader.osl:137
#         color weatheringCol1 = mix( cin, color(1,1,1), 0.5);
	mix		___338_weatheringCol1 cin $const26 $const18 	%line{137} %argrw{"wrrr"}
# flowerPotShader.osl:138
#         color weatheringCol2 = mix( mix(cout, weatheringCol1, 1-rad2/rad1),
	div		$tmp91 $const39 $const27 	%line{138} %argrw{"wrr"}
	sub		$tmp92 $const14 $tmp91 	%argrw{"wrr"}
	mix		$tmp90 cout ___338_weatheringCol1 $tmp92 	%argrw{"wrrr"}
# flowerPotShader.osl:140
#                                     0.3);
	mix		___338_weatheringCol2 $tmp90 $const33 $const24 	%line{140} %argrw{"wrrr"}
# flowerPotShader.osl:141
#         float amp = 0.7;
	assign		___338_amp $const17 	%line{141} %argrw{"wr"}
# flowerPotShader.osl:142
#         float persistence = 0.56;
	assign		___338_persistence $const34 	%line{142} %argrw{"wr"}
# flowerPotShader.osl:143
#         float freq = 4;
	assign		___338_freq $const19 	%line{143} %argrw{"wr"}
# flowerPotShader.osl:144
#         float lacunarity = 3;
	assign		___338_lacunarity $const5 	%line{144} %argrw{"wr"}
# flowerPotShader.osl:145
#         float octaves = 4;
	assign		___338_octaves $const19 	%line{145} %argrw{"wr"}
# flowerPotShader.osl:146
#         float seed = 0;
	assign		___338_seed $const4 	%line{146} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	functioncall	$const20 228 	%line{148} %argrw{"r"}
# flowerPotShader.osl:67
#         float val = 0;
	assign		___331_val $const4 	%line{67} %argrw{"wr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	for		$tmp95 217 218 226 227 	%line{68} %argrw{"r"}
	assign		___332_i $const4 	%argrw{"wr"}
	lt		$tmp95 ___332_i ___338_octaves 	%argrw{"wrr"}
# flowerPotShader.osl:70
#             val += amp*(float)noise("perlin", w*freq + (point)seed);
	mul		$tmp97 PP ___338_freq 	%line{70} %argrw{"wrr"}
	assign		$tmp98 ___338_seed 	%argrw{"wr"}
	add		$tmp99 $tmp97 $tmp98 	%argrw{"wrr"}
	noise		$tmp96 $const21 $tmp99 	%argrw{"wrr"}
	mul		$tmp100 ___338_amp $tmp96 	%argrw{"wrr"}
	add		___331_val ___331_val $tmp100 	%argrw{"wrr"}
# flowerPotShader.osl:71
#             amp *= persistence;
	mul		___338_amp ___338_amp ___338_persistence 	%line{71} %argrw{"wrr"}
# flowerPotShader.osl:72
#             freq *= lacunarity;
	mul		___338_freq ___338_freq ___338_lacunarity 	%line{72} %argrw{"wrr"}
# flowerPotShader.osl:68
#         for(int i=0; i<octaves; ++i)
	add		___332_i ___332_i $const8 	%line{68} %argrw{"wrr"}
# flowerPotShader.osl:74
#         return val;
	assign		$tmp94 ___331_val 	%line{74} %argrw{"wr"}
# flowerPotShader.osl:148
#                             octaves, seed, PP);
	add		___338_dist ___338_dist $tmp94 	%line{148} %argrw{"wrr"}
# flowerPotShader.osl:150
#         if(dist < rad1)
	lt		$tmp101 ___338_dist $const27 	%line{150} %argrw{"wrr"}
	if		$tmp101 245 245 	%argrw{"r"}
# flowerPotShader.osl:152
#             float scale1 = 1-max(dist/rad1,0);
	div		$tmp103 ___338_dist $const27 	%line{152} %argrw{"wrr"}
	max		$tmp102 $tmp103 $const35 	%argrw{"wrr"}
	sub		___339_scale1 $const14 $tmp102 	%argrw{"wrr"}
# flowerPotShader.osl:153
#             cout = mix(cout, weatheringCol1, scale1);
	mix		cout cout ___338_weatheringCol1 ___339_scale1 	%line{153} %argrw{"wrrr"}
# flowerPotShader.osl:154
#             dispOut = dispOut - scale1*0.004;
	mul		$tmp104 ___339_scale1 $const36 	%line{154} %argrw{"wrr"}
	sub		dispOut dispOut $tmp104 	%argrw{"wrr"}
# flowerPotShader.osl:156
#             if(dist < rad2)
	lt		$tmp105 ___338_dist $const39 	%line{156} %argrw{"wrr"}
	if		$tmp105 245 245 	%argrw{"r"}
# flowerPotShader.osl:158
#                 float scale2 = max(dist/rad2,0);
	div		$tmp106 ___338_dist $const39 	%line{158} %argrw{"wrr"}
	max		___340_scale2 $tmp106 $const35 	%argrw{"wrr"}
# flowerPotShader.osl:159
#                 scale2 *= scale2*scale2;
	mul		$tmp107 ___340_scale2 ___340_scale2 	%line{159} %argrw{"wrr"}
	mul		___340_scale2 ___340_scale2 $tmp107 	%argrw{"wrr"}
# flowerPotShader.osl:160
#                 cout = mix(cout, weatheringCol2, 1-scale2);
	sub		$tmp108 $const14 ___340_scale2 	%line{160} %argrw{"wrr"}
	mix		cout cout ___338_weatheringCol2 $tmp108 	%argrw{"wrrr"}
# flowerPotShader.osl:172
#     if(Y>3 and Y<3.4) //and Z<0)
	gt		$tmp109 Y $const5 	%line{172} %argrw{"wrr"}
	neq		$tmp110 $tmp109 $const4 	%argrw{"wrr"}
	if		$tmp110 251 251 	%argrw{"r"}
	lt		$tmp111 Y $const40 	%argrw{"wrr"}
	neq		$tmp112 $tmp111 $const4 	%argrw{"wrr"}
	assign		$tmp110 $tmp112 	%argrw{"wr"}
	if		$tmp110 263 263 	%argrw{"r"}
# flowerPotShader.osl:174
#         float diskFalloff = 0.1;
	assign		___342_diskFalloff $const28 	%line{174} %argrw{"wr"}
# flowerPotShader.osl:175
#         point centre = point (0.5,0.5,0);
	assign		___342_centre $const41 	%line{175} %argrw{"wr"}
# flowerPotShader.osl:176
#         point here = point (q,r,0);
	point		___342_here q r $const35 	%line{176} %argrw{"wrrr"}
# flowerPotShader.osl:177
#         float dist = distance(centre,here);
	distance	___342_dist ___342_centre ___342_here 	%line{177} %argrw{"wrr"}
# flowerPotShader.osl:178
#         float diskRad = 0.3;
	assign		___342_diskRad $const24 	%line{178} %argrw{"wr"}
# flowerPotShader.osl:179
#         float inDisk = 1-smoothstep(diskRad-diskFalloff, diskRad+diskFalloff,dist);
	sub		$tmp114 ___342_diskRad ___342_diskFalloff 	%line{179} %argrw{"wrr"}
	add		$tmp115 ___342_diskRad ___342_diskFalloff 	%argrw{"wrr"}
	smoothstep	$tmp113 $tmp114 $tmp115 ___342_dist 	%argrw{"wrrr"}
	sub		___342_inDisk $const14 $tmp113 	%argrw{"wrr"}
# flowerPotShader.osl:180
#         dispOut += inDisk*0.005;
	mul		$tmp116 ___342_inDisk $const25 	%line{180} %argrw{"wrr"}
	add		dispOut dispOut $tmp116 	%argrw{"wrr"}
# flowerPotShader.osl:183
#     float lineTop = 3.4;
	assign		___341_lineTop $const40 	%line{183} %argrw{"wr"}
# flowerPotShader.osl:184
#     float lineBottom = 3;
	assign		___341_lineBottom $const5 	%line{184} %argrw{"wr"}
# flowerPotShader.osl:185
#     float lineFalloff = 0.2;
	assign		___341_lineFalloff $const42 	%line{185} %argrw{"wr"}
# flowerPotShader.osl:186
#     if((Y>lineBottom and Y<lineTop))
	gt		$tmp117 Y ___341_lineBottom 	%line{186} %argrw{"wrr"}
	neq		$tmp118 $tmp117 $const4 	%argrw{"wrr"}
	if		$tmp118 272 272 	%argrw{"r"}
	lt		$tmp119 Y ___341_lineTop 	%argrw{"wrr"}
	neq		$tmp120 $tmp119 $const4 	%argrw{"wrr"}
	assign		$tmp118 $tmp120 	%argrw{"wr"}
	if		$tmp118 286 286 	%argrw{"r"}
# flowerPotShader.osl:188
#         float scale = sqrt(sqrt(smoothstep(lineBottom, lineBottom + lineFalloff, Y)));
	add		$tmp123 ___341_lineBottom ___341_lineFalloff 	%line{188} %argrw{"wrr"}
	smoothstep	$tmp122 ___341_lineBottom $tmp123 Y 	%argrw{"wrrr"}
	sqrt		$tmp121 $tmp122 	%argrw{"wr"}
	sqrt		___343_scale $tmp121 	%argrw{"wr"}
# flowerPotShader.osl:189
#         float lineWidth = 0.3;
	assign		___343_lineWidth $const24 	%line{189} %argrw{"wr"}
# flowerPotShader.osl:190
#         lineWidth *= scale;
	mul		___343_lineWidth ___343_lineWidth ___343_scale 	%line{190} %argrw{"wrr"}
# flowerPotShader.osl:191
#         float inLine = smoothstep(0.5-lineWidth, 0.5, 0.5-abs(q-0.5));
	sub		$tmp124 $const18 ___343_lineWidth 	%line{191} %argrw{"wrr"}
	sub		$tmp126 q $const18 	%argrw{"wrr"}
	abs		$tmp125 $tmp126 	%argrw{"wr"}
	sub		$tmp127 $const18 $tmp125 	%argrw{"wrr"}
	smoothstep	___343_inLine $tmp124 $const18 $tmp127 	%argrw{"wrrr"}
# flowerPotShader.osl:192
#         dispOut += inLine*0.005;
	mul		$tmp128 ___343_inLine $const25 	%line{192} %argrw{"wrr"}
	add		dispOut dispOut $tmp128 	%argrw{"wrr"}
	end
