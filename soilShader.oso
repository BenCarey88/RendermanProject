OpenShadingLanguage 1.00
# Compiled by oslc 1.8.2.pixar1697a56
# options: 
shader soilShader
param	color	cin	1 1 1		%read{0,4} %write{2147483647,-1}
oparam	color	cout	0 0 0		%read{2147483647,-1} %write{6,6}
oparam	float	dispOut	0		%read{13,21} %write{9,21}
global	point	P	%read{1,18} %write{2147483647,-1}
local	color	baseNoiseCol	%read{4,4} %write{0,0}
local	float	noiseLayer	%read{4,5} %write{3,3}
const	color	$const1	0 0 0		%read{0,0} %write{2147483647,-1}
const	float	$const2	0.5		%read{0,6} %write{2147483647,-1}
temp	float	$tmp2	%read{2,2} %write{1,1}
const	string	$const3	"perlin"		%read{1,19} %write{2147483647,-1}
temp	float	$tmp3	%read{3,3} %write{2,2}
temp	color	$tmp4	%read{5,5} %write{4,4}
temp	color	$tmp5	%read{6,6} %write{5,5}
const	float	$const4	0.07		%read{9,9} %write{2147483647,-1}
temp	float	$tmp6	%read{9,9} %write{8,8}
temp	point	$tmp7	%read{8,8} %write{7,7}
const	float	$const6	2		%read{7,7} %write{2147483647,-1}
const	float	$const7	0.039999999		%read{12,12} %write{2147483647,-1}
temp	float	$tmp8	%read{12,12} %write{11,11}
temp	point	$tmp9	%read{11,11} %write{10,10}
const	float	$const9	5		%read{10,10} %write{2147483647,-1}
temp	float	$tmp10	%read{13,13} %write{12,12}
const	float	$const10	0.02		%read{16,16} %write{2147483647,-1}
temp	float	$tmp11	%read{16,16} %write{15,15}
temp	point	$tmp12	%read{15,15} %write{14,14}
const	float	$const12	11		%read{14,14} %write{2147483647,-1}
temp	float	$tmp13	%read{17,17} %write{16,16}
const	float	$const13	0.0099999998		%read{20,20} %write{2147483647,-1}
temp	float	$tmp14	%read{20,20} %write{19,19}
temp	point	$tmp15	%read{19,19} %write{18,18}
const	float	$const15	19		%read{18,18} %write{2147483647,-1}
temp	float	$tmp16	%read{21,21} %write{20,20}
code ___main___
# soilShader.osl:27
#     color baseNoiseCol = mix(cin,color(0,0,0),0.5);
	mix		baseNoiseCol cin $const1 $const2 	%filename{"soilShader.osl"} %line{27} %argrw{"wrrr"}
# soilShader.osl:28
#     float noiseLayer = 0.5 + 0.5*(float)noise("perlin",P);
	noise		$tmp2 $const3 P 	%line{28} %argrw{"wrr"}
	mul		$tmp3 $const2 $tmp2 	%argrw{"wrr"}
	add		noiseLayer $const2 $tmp3 	%argrw{"wrr"}
# soilShader.osl:29
#     cout = mix(baseNoiseCol,cin,noiseLayer)*noiseLayer*0.5;
	mix		$tmp4 baseNoiseCol cin noiseLayer 	%line{29} %argrw{"wrrr"}
	mul		$tmp5 $tmp4 noiseLayer 	%argrw{"wrr"}
	mul		cout $tmp5 $const2 	%argrw{"wrr"}
# soilShader.osl:31
#     dispOut = 0.07*(float)noise("perlin",P*2);
	mul		$tmp7 P $const6 	%line{31} %argrw{"wrr"}
	noise		$tmp6 $const3 $tmp7 	%argrw{"wrr"}
	mul		dispOut $const4 $tmp6 	%argrw{"wrr"}
# soilShader.osl:32
#     dispOut += 0.04*(float)noise("perlin",P*5);
	mul		$tmp9 P $const9 	%line{32} %argrw{"wrr"}
	noise		$tmp8 $const3 $tmp9 	%argrw{"wrr"}
	mul		$tmp10 $const7 $tmp8 	%argrw{"wrr"}
	add		dispOut dispOut $tmp10 	%argrw{"wrr"}
# soilShader.osl:33
#     dispOut += 0.02*(float)noise("perlin",P*11);
	mul		$tmp12 P $const12 	%line{33} %argrw{"wrr"}
	noise		$tmp11 $const3 $tmp12 	%argrw{"wrr"}
	mul		$tmp13 $const10 $tmp11 	%argrw{"wrr"}
	add		dispOut dispOut $tmp13 	%argrw{"wrr"}
# soilShader.osl:34
#     dispOut += 0.01*(float)noise("perlin",P*19);
	mul		$tmp15 P $const15 	%line{34} %argrw{"wrr"}
	noise		$tmp14 $const3 $tmp15 	%argrw{"wrr"}
	mul		$tmp16 $const13 $tmp14 	%argrw{"wrr"}
	add		dispOut dispOut $tmp16 	%argrw{"wrr"}
	end
